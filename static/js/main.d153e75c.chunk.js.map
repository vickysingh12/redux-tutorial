{"version":3,"sources":["logo.svg","Components/Quotebox.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["module","exports","Quotebox","props","randomquote","Math","round","random","useState","users","setUsers","quote","setQuote","author","setAuthor","Animationclass","setAnimationclass","AnimationclassAuthor","setAnimationclassAuthor","mystyle","color","backgroundColor","a","fetch","response","json","console","log","quotes","useEffect","getUsers","id","className","class","style","title","target","href","onClick","e","setTimeout","colorchange","connect","state","colorarray","colornow","wrapperclass","setWrapperclass","length","dispatch","type","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d153e75c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\n \nexport const Quotebox = (props) => {\n\n  let randomquote = Math.round(Math.random()*10)\n  \n  const [users, setUsers] = useState([]);\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [Animationclass, setAnimationclass] = useState('quote-text');\n  const [AnimationclassAuthor, setAnimationclassAuthor] = useState('quote-author');\n  let color = props.color\n   \n  const mystyle = {\n    backgroundColor: props.color,\n    };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  \n  async function getUsers() {\n    const response = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n    const users = await response.json();\n    console.log(users)\n    setUsers(users.quotes);\n    setQuote( users.quotes[randomquote].quote )\n    setAuthor( users.quotes[randomquote].author );\n\n  }\n\nfunction eventhandler() {\n    setQuote( users[++randomquote].quote )\n    setAuthor( users[++randomquote].author )\n}\n\nfunction eventmain(e) {\n    \n    setAnimationclass('jj')\n    setAnimationclassAuthor('kk')\n    setTimeout(function(){\n        setAnimationclass('quote-text')\n        setAnimationclassAuthor('quote-author')\n        eventhandler()\n    },1000)\n    props.colorchange()\n    \n}\n  return (<>\n    \n    <div id=\"quote-box\">\n                <div className={Animationclass}>\n                    <i className=\"fa fa-quote-left\"></i>\n                <span id=\"text\">{quote}</span>\n                </div>\n                <div className={AnimationclassAuthor}>- <span id=\"author\">{author}</span></div>\n                <div class=\"buttons\">\n                    <a class=\"button\" style={mystyle} id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" href=\"https://twitter.com/intent/tweet?hashtags=quotes&amp;related=freecodecamp&amp;text=%22Either%20write%20something%20worth%20reading%20or%20do%20something%20worth%20writing.%22%20Benjamin%20Franklin\">\n                        <i class=\"fab fa-twitter\"></i>\n                    </a>\n                    <a class=\"button\" style={mystyle} id=\"tumblr-quote\" title=\"Post this quote on tumblr!\" target=\"_blank\" href=\"https://www.tumblr.com/widgets/share/tool?posttype=quote&amp;tags=quotes,freecodecamp&amp;caption=Benjamin%20Franklin&amp;content=Either%20write%20something%20worth%20reading%20or%20do%20something%20worth%20writing.&amp;canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&amp;shareSource=tumblr_share_button\">\n                        <i class=\"fab fa-tumblr\"></i>\n                    </a>\n                    <button onClick={eventmain} style={mystyle} class=\"button\" id=\"new-quote\">New quote</button>\n                    </div>\n                </div>\n       \n  </>);\n};\n\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Quotebox} from './Components/Quotebox.js'\nimport { connect } from 'react-redux'\n\nfunction App(props ) {\n    \n    const [color, setColor] = useState([...props.colorarray]); //initializing state from redux store values\n    var [colornow , setColornow] = useState(props.colornow)     //\n    \n    const [wrapperclass, setWrapperclass] = useState('wrapper')\n    const mystyle = {                   //inline style\n        backgroundColor: color[props.colornow],\n        color: color[props.colornow]\n    };\n    \n    function colorchange() {\n        if(props.colornow >= color.length) {\n           \n           props.dispatch({     //dispatching action to change color value to first array item\n            type: 'RESETCOLOR'\n          })\n        } \n\n        setWrapperclass('wrapperClass')\n        setTimeout(function(){\n            \n            setWrapperclass('wrapper')\n            props.dispatch({           //dispatching action to change color value\n                type: 'CHANGECOLORNOW'\n              })\n\n        },10)\n    }\n\n    return (<>\n        <div className={wrapperclass} style={mystyle}>\n            <Quotebox color={color[props.colornow]} colorchange={colorchange} ></Quotebox>\n        </div><p>{props.colornow}</p>\n        <p>{colornow}</p>\n        </>\n    );\n}\n\nconst mapStateToProps = state => {\n    return { colorarray: state.color , colornow: state.colornow }\n  }\n  \n  export default connect(\n    mapStateToProps\n  )(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n    color: ['#16a085','#27ae60','#2c3e50','#f39c12','#e74c3c','#9b59b6','#FB6964','#342224','#472E32','#BDBB99','#77B1A9','#73A857'],\n    colornow: 0,\n}\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === 'CHANGECOLORNOW') {\n    return Object.assign({}, state, {\n        colornow: state.colornow + 1\n    })\n  }\n\n  if (action.type === 'RESETCOLOR') {\n    return Object.assign({}, state, {\n        colornow: 0\n    })\n  }\n\n  return state\n}\n\nconst store = createStore(reducer,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nwindow.store = store\nconsole.log(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}